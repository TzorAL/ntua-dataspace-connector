{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "$id": "https://tsg.dataspac.es/schemas/helm-charts/connector.json",
  "type": "object",
  "default": {},
  "title": "TSG Connector Helm Chart schema",
  "required": ["ids"],
  "properties": {
    "pullSecret": {
      "type": "object",
      "default": {},
      "title": "The kubernetes pullsecret name for connecting to a private Docker registry. Leave empty for default behaviour",
      "required": [],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "default": null,
          "title": "Pull secret name",
          "examples": ["ids-pull-secret"]
        },
        "credentials": {
          "type": "object",
          "default": null,
          "title": "Provided pull credentials",
          "required": ["registry", "username", "password"],
          "additionalProperties": false,
          "properties": {
            "registry": {
              "type": "string",
              "default": "",
              "title": "Docker registry for embedded pull credentials",
              "examples": ["docker.nexus.dataspac.es"]
            },
            "username": {
              "type": "string",
              "default": null,
              "title": "Username for authentication with the Docker registry",
              "examples": ["username"]
            },
            "password": {
              "type": "string",
              "default": null,
              "title": "Password for authentication with the DOcker registry",
              "examples": ["password"]
            }
          },
          "examples": [
            {
              "registry": "docker.nexus.dataspac.es",
              "username": "username",
              "password": "password"
            }
          ]
        }
      },
      "examples": [
        {
          "name": "ids-pull-secret",
          "credentials": {
            "registry": "docker.nexus.dataspac.es",
            "username": "username",
            "password": "password"
          }
        }
      ]
    },
    "host": {
      "type": "string",
      "default": null,
      "title": "Default host for ingress resources",
      "examples": ["tsg-connector.domain.com"]
    },
    "useNewIngress": {
      "type": "boolean",
      "default": false,
      "title": "Use new Kubernetes ingress apiVersion `networking.k8s.io/v1` (for K8s >=v1.19) instead of `extensions/v1beta1` (for K8s <=v1.21) for all Ingress resources",
      "examples": [true, false]
    },
    "deployment": {
      "type": "object",
      "default": {},
      "title": "Deployment configuration",
      "additionalProperties": false,
      "properties": {
        "annotations": {
          "type": "object",
          "default": {},
          "title": "Kubernetes annotations applied to the core-container and data apps configured in containers",
          "required": [],
          "properties": {},
          "examples": [{}]
        },
        "pullPolicy": {
          "type": "string",
          "default": "",
          "title": "Pull policy for all data apps configured in `values`",
          "enum": ["Always", "IfNotPresent", "Never"],
          "examples": ["Always"]
        }
      },
      "examples": [
        {
          "annotations": {},
          "pullPolicy": "Always"
        }
      ]
    },
    "coreContainer": {
      "type": "object",
      "default": {},
      "title": "Core Container deployment configuration",
      "additionalProperties": false,
      "properties": {
        "replicaCount": {
          "type": "integer",
          "default": 1,
          "title": "Replicas as specified in the core container deployment",
          "examples": [1]
        },
        "image": {
          "type": "string",
          "default": "docker.nexus.dataspac.es/core-container:master",
          "title": "Core Container docker image name",
          "examples": ["docker.nexus.dataspac.es/core-container:master"]
        },
        "environment": {
          "type": "array",
          "default": [],
          "title": "Environment configuration",
          "items": {
            "type": "object",
            "default": {},
            "title": "Environment variable",
            "required": ["name", "value"],
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "default": "",
                "title": "Environment variable name",
                "examples": ["ENV_KEY"]
              },
              "value": {
                "type": "string",
                "default": "",
                "title": "Environment variable value",
                "examples": ["Value"]
              }
            },
            "examples": [
              {
                "name": "ENV_KEY",
                "value": "Value"
              }
            ]
          },
          "examples": [
            [
              {
                "name": "ENV_KEY",
                "value": "Value"
              }
            ]
          ]
        },
        "nodePort": {
          "type": "object",
          "default": null,
          "title": "Core Container NodePort configuration",
          "additionalProperties": false,
          "properties": {
            "api": {
              "type": "integer",
              "default": null,
              "title": "The api Schema",
              "examples": [31000],
              "minimum": 30000,
              "maximum": 32768
            },
            "camel": {
              "type": "integer",
              "default": null,
              "title": "The camel Schema",
              "examples": [31001],
              "minimum": 30000,
              "maximum": 32768
            }
          },
          "examples": [
            {
              "api": 31000,
              "camel": 31001
            }
          ]
        },
        "ingress": {
          "$ref": "#/$defs/ingress"
        },
        "apiIngress": {
          "type": "object",
          "default": {},
          "title": "Control exposing the /api endpoint of the coreContainer",
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": false,
              "title": "Enable exposing the /api endpoint of the coreContainer",
              "examples": [false, true]
            }
          },
          "examples": [
            {
              "enabled": true
            }
          ]
        },
        "secrets": {
          "type": "object",
          "default": {},
          "title": "Core container secret configuration",
          "required": ["idsIdentity"],
          "additionalProperties": false,
          "properties": {
            "idsIdentity": {
              "type": "object",
              "default": {},
              "title": "Enable IDS identity Kubernetes secret",
              "required": ["enabled"],
              "additionalProperties": false,
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "default": true,
                  "title": "Enable secret-based IDS identity",
                  "examples": [true]
                },
                "name": {
                  "type": "string",
                  "default": "ids-identity-secret",
                  "title": "IDS Identity Kubernetes secret name",
                  "examples": ["ids-identity-secret"]
                },
                "existing": {
                  "type": "boolean",
                  "default": true,
                  "title": "Use existing pre-provisioned Kubernetes secret, preferred due to secrecy of the secret",
                  "examples": [true]
                },
                "data": {
                  "type": "object",
                  "default": null,
                  "title": "Embedded secret data",
                  "required": ["ids.crt", "ids.key", "ca.crt"],
                  "additionalProperties": false,
                  "properties": {
                    "ids.crt": {
                      "type": "string",
                      "default": "",
                      "title": "IDS Identity certificate value (PEM-encoded)",
                      "examples": [
                        "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n"
                      ]
                    },
                    "ids.key": {
                      "type": "string",
                      "default": "",
                      "title": "IDS Identity private key value (PEM-encoded)",
                      "examples": [
                        "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n"
                      ]
                    },
                    "ca.crt": {
                      "type": "string",
                      "default": "",
                      "title": "IDS Identity Certificate chain value (PEM-encoded)",
                      "examples": [
                        "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n"
                      ]
                    }
                  },
                  "examples": [
                    {
                      "ids.crt": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n",
                      "ids.key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n",
                      "ca.crt": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n"
                    }
                  ]
                }
              },
              "examples": [
                {
                  "enabled": true,
                  "name": "ids-identity-secret",
                  "existing": false,
                  "data": {
                    "ids.crt": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n",
                    "ids.key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n",
                    "ca.crt": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n"
                  }
                }
              ]
            }
          },
          "examples": [
            {
              "idsIdentity": {
                "enabled": true,
                "name": "ids-identity-secret",
                "existing": false,
                "data": {
                  "ids.crt": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n",
                  "ids.key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n",
                  "ca.crt": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n"
                }
              }
            }
          ]
        },
        "persistentVolume": {
          "type": "object",
          "default": {},
          "title": "Persistent volume configuration",
          "required": ["name", "mountPath", "storageSize"],
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string",
              "default": "",
              "title": "Persistent Volume name",
              "examples": ["core-container-pvc"]
            },
            "mountPath": {
              "type": "string",
              "default": "",
              "title": "Mount Path inside the container",
              "examples": ["/resources"]
            },
            "storageSize": {
              "type": "string",
              "default": "",
              "title": "Storage Size",
              "examples": ["1Gi"]
            },
            "storageClassName": {
              "type": "string",
              "default": "",
              "title": "Storage class name",
              "examples": ["default"]
            },
            "disableClaim": {
              "type": "boolean",
              "default": false,
              "title": "Disable persistent volume claim creation",
              "examples": [true]
            }
          },
          "examples": [
            {
              "name": "core-container-pvc",
              "mountPath": "/resources",
              "storageSize": "1Gi",
              "storageClassName": "default",
              "disableClaim": true
            }
          ]
        },
        "livenessProbe": {
          "type": "object",
          "default": {},
          "title": "Kubernetes livenessProbe",
          "required": [],
          "properties": {},
          "examples": [{}]
        },
        "startupProbe": {
          "type": "object",
          "default": {},
          "title": "Kubernetes livenessProbe",
          "required": [],
          "properties": {},
          "examples": [{}]
        },
        "updateStrategy": {
          "type": "object",
          "default": null,
          "title": "Deployment update strategy",
          "additionalProperties": true,
          "properties": {
            "type": {
              "type": "string",
              "default": "RollingUpdate",
              "title": "Update strategy type",
              "examples": ["RollingUpdate", "Recreate"]
            }
          }
        }
      },
      "examples": [
        {
          "replicaCount": 1,
          "image": "docker.nexus.dataspac.es/core-container:master",
          "environment": [
            {
              "name": "ENV_KEY",
              "value": "Value"
            }
          ],
          "nodePort": {
            "api": 31000,
            "camel": 31001
          },
          "ingress": {
            "path": "/(.*)",
            "rewriteTarget": "/$1",
            "clusterIssuer": "letsencrypt",
            "secretName": null,
            "host": "connector-cc.domain.com",
            "annotations": {}
          },
          "secrets": {
            "idsIdentity": {
              "enabled": true,
              "name": "ids-identity-secret",
              "existing": false,
              "data": {
                "ids.crt": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n",
                "ids.key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n",
                "ca.crt": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n"
              }
            }
          },
          "persistentVolume": {
            "name": "core-container-pvc",
            "mountPath": "/resources",
            "storageSize": "1Gi",
            "storageClassName": "default",
            "disableClaim": true
          }
        }
      ]
    },
    "adminUi": {
      "type": "object",
      "default": {},
      "title": "The adminUi Schema",
      "required": ["enabled", "image"],
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": true,
          "title": "Toggle for enabling the Core Container Administration UI",
          "examples": [true]
        },
        "image": {
          "type": "string",
          "default": "docker.nexus.dataspac.es/core-container-ui:master",
          "title": "Docker image to use for the UI",
          "examples": ["docker.nexus.dataspac.es/core-container-ui:master"]
        },
        "ingress": {
          "$ref": "#/$defs/ingress"
        },
        "nodePort": {
          "type": "integer",
          "default": null,
          "title": "Configure NodePort service for the UI",
          "examples": [31100],
          "minimum": 30000,
          "maximum": 32768
        },
        "updateStrategy": {
          "type": "object",
          "default": null,
          "title": "Deployment update strategy",
          "additionalProperties": true,
          "properties": {
            "type": {
              "type": "string",
              "default": "RollingUpdate",
              "title": "Update strategy type",
              "examples": ["RollingUpdate", "Recreate"]
            }
          }
        }
      },
      "examples": [
        {
          "enabled": true,
          "image": "docker.nexus.dataspac.es/core-container-ui:master",
          "ingress": {
            "path": "/(.*)",
            "rewriteTarget": "/$1",
            "clusterIssuer": "letsencrypt",
            "secretName": null,
            "host": "connector-ui.domain.com",
            "annotations": {}
          },
          "nodePort": 31100
        }
      ]
    },
    "ids": {
      "$ref": "#/$defs/coreContainer"
    },
    "containers": {
      "type": "array",
      "default": [],
      "title": "Deploy-time container configurations",
      "items": {
        "type": "object",
        "default": {},
        "title": "Container configuration",
        "required": [
          "type",
          "name",
          "image"
        ],
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "enum": ["data-app", "helper"],
            "default": "",
            "title": "Container Type. Either `data-app` (for data-app containers healthchecks and configuration are configured out of the box) or `helper`",
            "examples": ["data-app"]
          },
          "name": {
            "type": "string",
            "default": "",
            "title": "Container Name",
            "examples": ["data-app-container"]
          },
          "image": {
            "type": "string",
            "default": "",
            "title": "Container Image (including tag)",
            "examples": ["data-app-container-image:latest"]
          },
          "apiKey": {
            "type": "string",
            "default": "",
            "title": "Core Container API Key",
            "examples": ["APIKEY-BQf3ta9Gkkr36MtQjRsQ3noX"]
          },
          "validateResources": {
            "type": "object",
            "default": {},
            "title": "Continously validate the correctness of resources registered at the core container",
            "required": ["enabled", "interval"],
            "additionalProperties": false,
            "properties": {
              "enabled": {
                "type": "boolean",
                "default": false,
                "title": "Validate state of resource metadata present at the core container",
                "examples": [true]
              },
              "interval": {
                "type": "integer",
                "default": 0,
                "title": "Validation interval in milliseconds",
                "examples": [30000]
              }
            },
            "examples": [
              {
                "enabled": true,
                "interval": 30000
              }
            ]
          },
          "cacheInvalidationPeriod": {
            "type": "integer",
            "default": 0,
            "title": "Broker cache entry invalidation period in milliseconds",
            "examples": [1800000]
          },
          "updateStrategy": {
            "type": "object",
            "default": null,
            "title": "Deployment update strategy",
            "additionalProperties": true,
            "properties": {
              "type": {
                "type": "string",
                "default": "RollingUpdate",
                "title": "Update strategy type",
                "examples": ["RollingUpdate", "Recreate"]
              }
            }
          },
          "idsConfig": {
            "type": "object",
            "default": {},
            "title": "Extra IDS configuration properties",
            "required": [],
            "properties": {},
            "examples": [{}]
          },
          "config": {
            "type": "object",
            "default": {},
            "title": "Data App specific configuration properties",
            "required": [],
            "properties": {},
            "examples": [{}]
          },
          "services": {
            "type": "array",
            "default": [],
            "title": "Container services configuration",
            "items": {
              "type": "object",
              "default": {},
              "title": "Container service",
              "required": ["port", "name"],
              "additionalProperties": false,
              "properties": {
                "port": {
                  "type": "integer",
                  "default": 0,
                  "title": "Port number for both container as service",
                  "examples": [5000]
                },
                "name": {
                  "type": "string",
                  "default": "",
                  "title": "Port name",
                  "examples": ["http"]
                },
                "nodePort": {
                  "type": "integer",
                  "default": 0,
                  "title": "NodePort configuration",
                  "minimum": 30000,
                  "maximum": 32768,
                  "examples": [30000]
                },
                "ingress": {
                  "$ref": "#/$defs/ingress"
                }
              },
              "examples": [
                {
                  "port": 5000,
                  "name": "http",
                  "nodePort": 30000,
                  "ingress": {
                    "path": "/(.*)",
                    "rewriteTarget": "/$1",
                    "clusterIssuer": "letsencrypt",
                    "secretName": null,
                    "host": "connector-data-app.domain.com",
                    "annotations": {}
                  }
                }
              ]
            },
            "examples": [
              [
                {
                  "port": 5000,
                  "name": "http",
                  "nodePort": 30000,
                  "ingress": {
                    "path": "/(.*)",
                    "rewriteTarget": "/$1",
                    "clusterIssuer": "letsencrypt",
                    "secretName": null,
                    "host": "connector-data-app.domain.com",
                    "annotations": {}
                  }
                }
              ]
            ]
          },
          "environment": {
            "type": "array",
            "default": [],
            "title": "Environment variable configuration, follows Kubernetes environment definition style with support for Secret injection",
            "items": {
              "type": "object",
              "title": "Environment variable",
              "required": ["name"],
              "oneOf": [
                {
                  "required": ["value"]
                },
                {
                  "required": ["valueFrom"]
                }
              ],
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string",
                  "title": "Environment variable name",
                  "examples": ["ENV_KEY", "ENV_KEY2"]
                },
                "value": {
                  "type": "string",
                  "default": "",
                  "title": "Environment variable value",
                  "examples": ["ENV_Value"]
                },
                "valueFrom": {
                  "type": "object",
                  "default": {},
                  "title": "Environment variable value from secret",
                  "required": ["secretKeyRef"],
                  "additionalProperties": false,
                  "properties": {
                    "secretKeyRef": {
                      "type": "object",
                      "default": {},
                      "title": "Secret key reference",
                      "required": ["name", "key"],
                      "additionalProperties": false,
                      "properties": {
                        "name": {
                          "type": "string",
                          "default": "",
                          "title": "Secret name",
                          "examples": ["mysecret"]
                        },
                        "key": {
                          "type": "string",
                          "default": "",
                          "title": "Secret key",
                          "examples": ["password"]
                        }
                      },
                      "examples": [
                        {
                          "name": "mysecret",
                          "key": "password"
                        }
                      ]
                    }
                  },
                  "examples": [
                    {
                      "secretKeyRef": {
                        "name": "mysecret",
                        "key": "password"
                      }
                    }
                  ]
                }
              },
              "examples": [
                {
                  "name": "ENV_KEY",
                  "value": "ENV_Value"
                },
                {
                  "name": "ENV_KEY2",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "mysecret",
                      "key": "password"
                    }
                  }
                }
              ]
            },
            "examples": [
              [
                {
                  "name": "ENV_KEY",
                  "value": "ENV_Value"
                },
                {
                  "name": "ENV_KEY2",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "mysecret",
                      "key": "password"
                    }
                  }
                }
              ]
            ]
          },
          "hostPath": {
            "type": "object",
            "default": {},
            "title": "HostPath Volume configuration. For mounting hostPath volumes to the container, primarily used for testing in local (e.g. Docker-Desktop) clusters",
            "required": ["name", "mountPath", "path"],
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "default": "",
                "title": "HostPath name",
                "examples": ["datapath"]
              },
              "mountPath": {
                "type": "string",
                "default": "",
                "title": "Mount Path inside the container",
                "examples": ["/data"]
              },
              "path": {
                "type": "string",
                "default": "",
                "title": "Mount Path on the host. Note: for Docker-Desktop WSL(2) clusters, the prefix for the windows host is /run/desktop/mnt/host",
                "examples": ["/run/desktop/mnt/host/c/k8stest"]
              }
            },
            "examples": [
              {
                "name": "datapath",
                "mountPath": "/data",
                "path": "/run/desktop/mnt/host/c/k8stest"
              }
            ]
          },
          "secrets": {
            "type": "array",
            "default": [],
            "title": "Mountable secret configurations",
            "items": {
              "type": "object",
              "default": {},
              "title": "Mountable secret",
              "required": ["name", "mountPath"],
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string",
                  "default": "",
                  "title": "Secret name",
                  "examples": ["secretName"]
                },
                "existing": {
                  "type": "boolean",
                  "default": false,
                  "title": "Use existing secret (in the same Kubernetes namespace)",
                  "examples": [true]
                },
                "mountPath": {
                  "type": "string",
                  "default": "",
                  "title": "Mount path inside the container",
                  "examples": ["/mnt/secretName"]
                },
                "data": {
                  "type": "object",
                  "default": {},
                  "title": "Secret data where keys are translated to file names",
                  "required": [],
                  "properties": {},
                  "examples": [{}]
                }
              },
              "examples": [
                {
                  "name": "secretName",
                  "mountPath": "/mnt/secretName"
                }
              ]
            },
            "examples": [
              [
                {
                  "name": "secretName",
                  "mountPath": "/mnt/secretName"
                }
              ]
            ]
          },
          "configMaps": {
            "type": "array",
            "default": [],
            "title": "Mountable ConfigMap configurations",
            "items": {
              "type": "object",
              "default": {},
              "title": "Mountable ConfigMap",
              "required": ["name", "mountPath"],
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string",
                  "default": "",
                  "title": "Secret name",
                  "examples": ["secretName"]
                },
                "existing": {
                  "type": "boolean",
                  "default": false,
                  "title": "Use existing config map (in the same Kubernetes namespace)",
                  "examples": [true]
                },
                "mountPath": {
                  "type": "string",
                  "default": "",
                  "title": "Mount path inside the container",
                  "examples": ["/mnt/secretName"]
                },
                "data": {
                  "type": "object",
                  "default": {},
                  "title": "ConfigMap data where keys are translated to file names",
                  "required": [],
                  "properties": {},
                  "examples": [{}]
                },
                "binaryData": {
                  "type": "object",
                  "default": {},
                  "title": "ConfigMap binary data where keys are translated to file names and the data must be base64 encoded",
                  "required": [],
                  "properties": {},
                  "examples": [{}]
                }
              },
              "examples": [
                {
                  "name": "secretName",
                  "mountPath": "/mnt/secretName"
                }
              ]
            },
            "examples": [
              [
                {
                  "name": "secretName",
                  "mountPath": "/mnt/secretName"
                }
              ]
            ]
          },
          "persistentVolume": {
            "type": "object",
            "default": {},
            "title": "Persistent Volume configuration",
            "required": ["name", "mountPath", "storageSize"],
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "default": "",
                "title": "Persistent Volume Claim name",
                "examples": ["data-app-pvc"]
              },
              "mountPath": {
                "type": "string",
                "default": "",
                "title": "Mount Path inside the container",
                "examples": ["/data"]
              },
              "storageSize": {
                "type": "string",
                "default": "",
                "title": "Storage Size",
                "examples": ["1Gi"]
              },
              "storageClassName": {
                "type": "string",
                "default": "",
                "title": "Storage class name",
                "examples": ["default"]
              },
              "disableClaim": {
                "type": "boolean",
                "default": false,
                "title": "Disable persistent volume claim creation",
                "examples": [true]
              }
            },
            "examples": [
              {
                "name": "data-app-pvc",
                "mountPath": "/data",
                "storageSize": "1Gi"
              }
            ]
          },
          "resources": {
            "type": "object",
            "default": {},
            "title": "Resource constraint configuration (see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)",
            "additionalProperties": false,
            "properties": {
              "requests": {
                "type": "object",
                "default": {},
                "title": "Requests configuration",
                "additionalProperties": false,
                "properties": {
                  "memory": {
                    "type": "string",
                    "default": "",
                    "title": "Memory requests",
                    "examples": ["64Mi"]
                  },
                  "cpu": {
                    "type": "string",
                    "default": "",
                    "title": "CPU requests",
                    "examples": ["250m"]
                  }
                },
                "examples": [
                  {
                    "memory": "64Mi",
                    "cpu": "250m"
                  }
                ]
              },
              "limits": {
                "type": "object",
                "default": {},
                "title": "Limits configuration",
                "additionalProperties": false,
                "properties": {
                  "memory": {
                    "type": "string",
                    "default": "",
                    "title": "Memory limits",
                    "examples": ["128Mi"]
                  },
                  "cpu": {
                    "type": "string",
                    "default": "",
                    "title": "CPU limits",
                    "examples": ["500m"]
                  }
                },
                "examples": [
                  {
                    "memory": "128Mi",
                    "cpu": "500m"
                  }
                ]
              }
            },
            "examples": [
              {
                "requests": {
                  "memory": "64Mi",
                  "cpu": "250m"
                },
                "limits": {
                  "memory": "128Mi",
                  "cpu": "500m"
                }
              }
            ]
          },
          "command": {
            "type": "array",
            "default": [],
            "title": "Command (equivalent to Docker Entrypoint) override",
            "items": {
              "type": "string",
              "default": "",
              "title": "A Schema",
              "examples": ["/bin/sh"]
            },
            "examples": [["/bin/sh"]]
          },
          "args": {
            "type": "array",
            "default": [],
            "title": "Argument (equivalent to Docker CMD) override",
            "items": {
              "type": "string",
              "default": "",
              "title": "A Schema",
              "examples": ["sleep", "50"]
            },
            "examples": [["sleep", "50"]]
          },
          "securityContext": {
            "type": "object",
            "default": {},
            "title": "Kubernetes security context",
            "required": ["runAsUser", "runAsGroup"],
            "additionalProperties": false,
            "properties": {
              "runAsUser": {
                "type": "integer",
                "default": 0,
                "title": "Linux user id used for the root process",
                "examples": [1000]
              },
              "runAsGroup": {
                "type": "integer",
                "default": 0,
                "title": "Linux user group used for the root process",
                "examples": [1000]
              }
            },
            "examples": [
              {
                "runAsUser": 1000,
                "runAsGroup": 1000
              }
            ]
          },
          "tty": {
            "type": "boolean",
            "default": false,
            "title": "Attach TTY device to the container",
            "examples": [true]
          },
          "livenessProbe": {
            "type": "object",
            "default": {},
            "title": "Kubernetes livenessProbe",
            "required": [],
            "properties": {},
            "examples": [{}]
          },
          "startupProbe": {
            "type": "object",
            "default": {},
            "title": "Kubernetes startupProbe",
            "required": [],
            "properties": {},
            "examples": [{}]
          }
  
        },
        "examples": [
          {
            "type": "data-app",
            "name": "data-app-container",
            "image": "data-app-container-image:latest",
            "validateResources": {
              "enabled": true,
              "interval": 30000
            },
            "cacheInvalidationPeriod": 1800000,
            "idsConfig": {},
            "config": {},
            "services": [
              {
                "port": 5000,
                "name": "http",
                "nodePort": 30000,
                "ingress": {
                  "path": "/(.*)",
                  "rewriteTarget": "/$1",
                  "clusterIssuer": "letsencrypt",
                  "secretName": null,
                  "host": "connector-data-app.domain.com",
                  "annotations": {}
                }
              }
            ],
            "environment": [
              {
                "name": "ENV_KEY",
                "value": "ENV_Value"
              },
              {
                "name": "ENV_KEY2",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "mysecret",
                    "key": "password"
                  }
                }
              }
            ],
            "hostPath": {
              "name": "datapath",
              "mountPath": "/data",
              "path": "/run/desktop/mnt/host/c/k8stest"
            },
            "secrets": [
              {
                "name": "secretName",
                "mountPath": "/mnt/secretName"
              }
            ],
            "persistentVolume": {
              "name": "data-app-pvc",
              "mountPath": "/data",
              "storageSize": "1Gi"
            },
            "resources": {
              "requests": {
                "memory": "64Mi",
                "cpu": "250m"
              },
              "limits": {
                "memory": "128Mi",
                "cpu": "500m"
              }
            },
            "command": ["/bin/sh"],
            "args": ["sleep", "50"],
            "securityContext": {
              "runAsUser": 1000,
              "runAsGroup": 1000
            }
          }
        ]
      },
      "examples": [
        [
          {
            "type": "data-app",
            "name": "data-app-container",
            "image": "data-app-container-image:latest",
            "validateResources": {
              "enabled": true,
              "interval": 30000
            },
            "cacheInvalidationPeriod": 1800000,
            "idsConfig": {},
            "config": {},
            "services": [
              {
                "port": 5000,
                "name": "http",
                "nodePort": 30000,
                "ingress": {
                  "path": "/(.*)",
                  "rewriteTarget": "/$1",
                  "clusterIssuer": "letsencrypt",
                  "secretName": null,
                  "host": "connector-data-app.domain.com",
                  "annotations": {}
                }
              }
            ],
            "environment": [
              {
                "name": "ENV_KEY",
                "value": "ENV_Value"
              },
              {
                "name": "ENV_KEY2",
                "valueFrom": {
                  "secretKeyRef": {
                    "name": "mysecret",
                    "key": "password"
                  }
                }
              }
            ],
            "hostPath": {
              "name": "datapath",
              "mountPath": "/data",
              "path": "/run/desktop/mnt/host/c/k8stest"
            },
            "secrets": [
              {
                "name": "secretName",
                "mountPath": "/mnt/secretName"
              }
            ],
            "persistentVolume": {
              "name": "data-app-pvc",
              "mountPath": "/data",
              "storageSize": "1Gi"
            },
            "resources": {
              "requests": {
                "memory": "64Mi",
                "cpu": "250m"
              },
              "limits": {
                "memory": "128Mi",
                "cpu": "500m"
              }
            },
            "command": ["/bin/sh"],
            "args": ["sleep", 50],
            "securityContext": {
              "runAsUser": 1000,
              "runAsGroup": 1000
            }
          }
        ]
      ]
    }
  },
  "examples": [
    {
      "pullSecret": {
        "name": null,
        "credentials": {
          "registry": "docker.nexus.dataspac.es",
          "username": null,
          "password": null
        }
      },
      "host": "tsg-connector.domain.com",
      "useNewIngress": true,
      "deployment": {
        "annotations": {},
        "pullPolicy": "Always"
      },
      "coreContainer": {
        "replicaCount": 1,
        "image": "docker.nexus.dataspac.es/core-container:master",
        "environment": [
          {
            "name": "ENV_KEY",
            "value": "Value"
          }
        ],
        "nodePort": {
          "api": 31000,
          "camel": 31001
        },
        "ingress": {
          "path": "/(.*)",
          "rewriteTarget": "/$1",
          "clusterIssuer": "letsencrypt",
          "secretName": null,
          "host": "connector-cc.domain.com",
          "annotations": {}
        },
        "secrets": {
          "idsIdentity": {
            "enabled": true,
            "name": "ids-identity-secret",
            "existing": true,
            "data": {
              "ids.crt": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n",
              "ids.key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n",
              "ca.crt": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n"
            }
          }
        },
        "persistentVolume": {
          "name": "core-container-pvc",
          "mountPath": "/resources",
          "storageSize": "1Gi",
          "storageClassName": "default",
          "disableClaim": true
        }
      },
      "adminUi": {
        "enabled": true,
        "image": "docker.nexus.dataspac.es/core-container-ui:master",
        "ingress": {
          "path": "/(.*)",
          "rewriteTarget": "/$1",
          "clusterIssuer": "letsencrypt",
          "secretName": null,
          "host": "connector-ui.domain.com",
          "annotations": {}
        },
        "nodePort": 31100
      },
      "ids": {
        "info": {
          "idsid": "IDS_COMPONENT_ID",
          "curator": "IDS_PARTICIPANT_ID",
          "maintainer": "IDS_PARTICIPANT_ID",
          "titles": ["CONNECTOR TITLE@en"],
          "descriptions": ["CONNECTOR DESCRIPTION@en"],
          "accessUrl": ["https://{{ .Values.host }}/router"]
        },
        "daps": {
          "url": "https://daps.test.ids.smart-connected.nl"
        },
        "keystore": {
          "type": "PEM",
          "pem": {
            "cert": "file:/secrets/idsidentity/ids.crt",
            "key": "file:/secrets/idsidentity/ids.key"
          }
        },
        "truststore": {
          "type": "PEM",
          "pem": {
            "chain": "file:/secrets/idsidentity/ca.crt"
          }
        },
        "broker": {
          "id": "urn:ids:connectors:Broker",
          "address": "https://broker.test.ids.smart-connected.nl",
          "autoRegister": true
        },
        "routes": {
          "ingress": {
            "http": [
              {
                "endpoint": "router",
                "dataApp": "http://{{ template \"tsg-connector.fullname\" . }}-data-app-http:8080/router",
                "parameters": "\u0026amp;matchOnUriPrefix=true",
                "policyEnforcement": false,
                "delegatedPolicyNegotiation": false
              }
            ],
            "idscp": [
              {
                "port": 9292,
                "dataApp": "http://{{ template \"tsg-connector.fullname\" . }}-data-app-http:8080/router",
                "tlsClientHostnameVerification": true
              }
            ]
          },
          "egress": {
            "http": [
              {
                "endpoint": "https_out"
              }
            ],
            "idscp": [
              {
                "endpoint": "idscp_out"
              }
            ]
          }
        },
        "workflow": {
          "incrementalIds": true,
          "type": "IDS",
          "internalHostname": "{{ template \"tsg-connector.fullname\" . }}",
          "useOrchestration": true
        },
        "orchestrationManagerConfig": {
          "enableKubernetes": true,
          "pullSecretName": "ids-pull-secret"
        },
        "security": {
          "enabled": true,
          "apiKeys": [
            {
              "id": "default",
              "key": "APIKEY-BQf3ta9Gkkr36MtQjRsQ3noX",
              "roles": ["DATA_APP", "PEF_MANAGER", "WORKFLOW_MANAGER"]
            }
          ],
          "users": [
            {
              "id": "admin",
              "password": "$2a$12$Xx4uZNtOBu91N0.D1GBi6ePelIJbNT8UzDppN.fU0P4lomlG/BcCm",
              "roles": ["ADMIN"]
            }
          ]
        }
      },
      "containers": [
        {
          "type": "data-app",
          "name": "data-app-container",
          "image": "data-app-container-image:latest",
          "validateResources": {
            "enabled": true,
            "interval": 30000
          },
          "cacheInvalidationPeriod": 1800000,
          "idsConfig": {},
          "config": {},
          "services": [
            {
              "port": 5000,
              "name": "http",
              "nodePort": 30000,
              "ingress": {
                "path": "/(.*)",
                "rewriteTarget": "/$1",
                "clusterIssuer": "letsencrypt",
                "secretName": null,
                "host": "connector-data-app.domain.com",
                "annotations": {}
              }
            }
          ],
          "environment": [
            {
              "name": "ENV_KEY",
              "value": "ENV_Value"
            },
            {
              "name": "ENV_KEY2",
              "valueFrom": {
                "secretKeyRef": {
                  "name": "mysecret",
                  "key": "password"
                }
              }
            }
          ],
          "hostPath": {
            "name": "datapath",
            "mountPath": "/data",
            "path": "/run/desktop/mnt/host/c/k8stest"
          },
          "secrets": [
            {
              "name": "secretName",
              "mountPath": "/mnt/secretName"
            }
          ],
          "persistentVolume": {
            "name": "data-app-pvc",
            "mountPath": "/data",
            "storageSize": "1Gi"
          },
          "resources": {
            "requests": {
              "memory": "64Mi",
              "cpu": "250m"
            },
            "limits": {
              "memory": "128Mi",
              "cpu": "500m"
            }
          },
          "command": ["/bin/sh"],
          "args": ["sleep", 50],
          "securityContext": {
            "runAsUser": 1000,
            "runAsGroup": 1000
          }
        }
      ]
    }
  ],
  "$defs": {
    "ingress": {
      "type": "object",
      "default": {},
      "title": "Ingress configuration",
      "required": ["path"],
      "properties": {
        "path": {
          "type": "string",
          "default": "",
          "title": "Ingress path",
          "examples": ["/(.*)"]
        },
        "rewriteTarget": {
          "type": "string",
          "default": "",
          "title": "Ingress rewrite target",
          "examples": ["/$1"]
        },
        "clusterIssuer": {
          "type": "string",
          "default": "",
          "title": "Cert-manager ClusterIssuer name",
          "examples": ["letsencrypt"]
        },
        "secretName": {
          "type": "string",
          "default": "",
          "title": "Name of the secret used for TLS keypair",
          "examples": ["tls-secret"]
        },
        "host": {
          "type": "string",
          "default": "",
          "title": "Hostname used for this ingress",
          "examples": ["connector-cc.domain.com"]
        },
        "annotations": {
          "type": "object",
          "default": {},
          "title": "Additional Kubernetes annotations for this ingress",
          "required": [],
          "properties": {},
          "examples": [{}]
        }
      },
      "examples": [
        {
          "path": "/(.*)",
          "rewriteTarget": "/$1",
          "clusterIssuer": "letsencrypt",
          "secretName": null,
          "host": "connector-cc.domain.com",
          "annotations": {}
        }
      ]
    },
    "coreContainer": {
      "type": "object",
      "default": {},
      "title": "Core Container configuration",
      "required": ["info", "daps", "broker"],
      "properties": {
        "info": {
          "type": "object",
          "default": {},
          "title": "Generic information on the IDS connector for usage in the Self Description that will be shared with the Broker",
          "required": [
            "idsid",
            "curator",
            "maintainer",
            "titles",
            "descriptions",
            "accessUrl"
          ],
          "properties": {
            "idsid": {
              "type": "string",
              "format": "uri",
              "default": "",
              "title": "IDS Component Identity (URI based identifier)",
              "examples": ["IDS_COMPONENT_ID"]
            },
            "curator": {
              "type": "string",
              "format": "uri",
              "default": "",
              "title": "IDS Participant Identity, aimed at the participant that is responsible for the contents of the connector (URI based identifier)",
              "examples": ["IDS_PARTICIPANT_ID"]
            },
            "maintainer": {
              "type": "string",
              "format": "uri",
              "default": "",
              "title": "The maintainer Schema",
              "examples": [
                "IDS Participant Identity, aimed at the participant that is responsible for the technical side of the connector (URI based identifier)"
              ]
            },
            "titles": {
              "type": "array",
              "default": [],
              "title": "Titles of the Connector",
              "items": {
                "type": "string",
                "default": "",
                "title": "Title",
                "examples": ["CONNECTOR TITLE@en"]
              },
              "examples": [["CONNECTOR TITLE@en"]]
            },
            "descriptions": {
              "type": "array",
              "default": [],
              "title": "Descriptions of the Connector",
              "items": {
                "type": "string",
                "default": "",
                "title": "Description",
                "examples": ["CONNECTOR DESCRIPTION@en"]
              },
              "examples": [["CONNECTOR DESCRIPTION@en"]]
            },
            "accessUrl": {
              "oneOf": [
                {
                  "type": "array",
                  "default": ["https://{{ .Values.host }}/router"],
                  "title": "Publicly accessible access URL(s) of the Connector",
                  "items": {
                    "type": "string",
                    "default": "",
                    "pattern": "https?://.*",
                    "title": "Access URL",
                    "examples": ["https://{{ .Values.host }}/router"]
                  },
                  "examples": [["https://{{ .Values.host }}/router"]]
                },
                {
                  "type": "string",
                  "pattern": "https?://.*",
                  "default": "https://{{ .Values.host }}/router",
                  "title": "Publicly accessible access URL(s) of the Connector",
                  "examples": ["https://{{ .Values.host }}/router"]
                }
              ]
            }
          },
          "examples": [
            {
              "idsid": "IDS_COMPONENT_ID",
              "curator": "IDS_PARTICIPANT_ID",
              "maintainer": "IDS_PARTICIPANT_ID",
              "titles": ["CONNECTOR TITLE@en"],
              "descriptions": ["CONNECTOR DESCRIPTION@en"],
              "accessUrl": ["https://{{ .Values.host }}/router"]
            }
          ]
        },
        "daps": {
          "type": "object",
          "default": {},
          "title": "Dynamic Attribute Provisioning Service (DAPS) configuration",
          "required": ["url"],
          "properties": {
            "url": {
              "type": "string",
              "default": "",
              "title": "Dynamic Attribute Provisioning Service URL",
              "examples": ["https://daps.playground.dataspac.es"]
            }
          },
          "examples": [
            {
              "url": "https://daps.playground.dataspac.es"
            }
          ]
        },
        "keystore": {
          "type": "object",
          "default": {},
          "title": "Keystore Configuration",
          "required": ["type", "pem"],
          "properties": {
            "type": {
              "type": "string",
              "default": "PEM",
              "title": "Keystore encoding type",
              "examples": ["PEM"]
            },
            "pem": {
              "type": "object",
              "default": {},
              "title": "PEM Configuration",
              "required": ["cert", "key"],
              "properties": {
                "cert": {
                  "type": "string",
                  "default": "file:/secrets/idsidentity/ids.crt",
                  "title": "File, Base64 encoded, or plain PEM certificate, defaults to secret based file value",
                  "examples": ["file:/secrets/idsidentity/ids.crt"]
                },
                "key": {
                  "type": "string",
                  "default": "file:/secrets/idsidentity/ids.key",
                  "title": "File, Base64 encoded, or plain PKCS#8 private key, defaults to secret based file value",
                  "examples": ["file:/secrets/idsidentity/ids.key"]
                }
              },
              "examples": [
                {
                  "cert": "file:/secrets/idsidentity/ids.crt",
                  "key": "file:/secrets/idsidentity/ids.key"
                }
              ]
            }
          },
          "examples": [
            {
              "type": "PEM",
              "pem": {
                "cert": "file:/secrets/idsidentity/ids.crt",
                "key": "file:/secrets/idsidentity/ids.key"
              }
            }
          ]
        },
        "truststore": {
          "type": "object",
          "default": {},
          "title": "Truststore Configuration",
          "required": ["type", "pem"],
          "properties": {
            "type": {
              "type": "string",
              "default": "",
              "title": "Truststore encoding type",
              "examples": ["PEM"]
            },
            "pem": {
              "type": "object",
              "default": {},
              "title": "PEM Configuration",
              "required": ["chain"],
              "properties": {
                "chain": {
                  "type": "string",
                  "default": "file:/secrets/idsidentity/ca.crt",
                  "title": "File, Base64 encoded, or plain PEM certificate list, defaults to secret based file value",
                  "examples": ["file:/secrets/idsidentity/ca.crt"]
                }
              },
              "examples": [
                {
                  "chain": "file:/secrets/idsidentity/ca.crt"
                }
              ]
            }
          },
          "examples": [
            {
              "type": "PEM",
              "pem": {
                "chain": "file:/secrets/idsidentity/ca.crt"
              }
            }
          ]
        },
        "broker": {
          "type": "object",
          "default": {},
          "title": "Broker Configuration",
          "required": ["id", "address"],
          "properties": {
            "id": {
              "type": "string",
              "default": "",
              "title": "Broker IDS Identifier",
              "examples": ["urn:playground:tsg:connectors:MetadataBroker"]
            },
            "address": {
              "type": "string",
              "default": "",
              "title": "Broker Access URL",
              "examples": [
                "https://broker.playground.dataspac.es/infrastructure"
              ]
            },
            "autoRegister": {
              "type": "boolean",
              "default": true,
              "title": "Automatically register the connector at startup",
              "examples": [true]
            }
          },
          "examples": [
            {
              "id": "urn:playground:tsg:connectors:MetadataBroker",
              "address": "https://broker.playground.dataspac.es/infrastructure",
              "autoRegister": true
            }
          ]
        },
        "routes": {
          "type": "object",
          "default": null,
          "title": "Route configuration",
          "properties": {
            "ingress": {
              "type": "object",
              "default": {},
              "title": "Ingress route configuration",
              "properties": {
                "http": {
                  "type": "array",
                  "default": [],
                  "title": "HTTP ingress route configurations",
                  "items": {
                    "type": "object",
                    "default": {},
                    "title": "HTTP Ingress",
                    "required": ["endpoint", "dataApp"],
                    "properties": {
                      "endpoint": {
                        "type": "string",
                        "default": "",
                        "title": "Exposed public endpoint",
                        "examples": ["router"]
                      },
                      "dataApp": {
                        "type": "string",
                        "default": "",
                        "title": "Data App endpoint the requests are routed to",
                        "examples": [
                          "http://{{ template \"tsg-connector.fullname\" . }}-data-app-http:8080/router"
                        ]
                      },
                      "parameters": {
                        "type": "string",
                        "default": "",
                        "title": "Additional Camel parameters for the route",
                        "examples": ["\u0026amp;matchOnUriPrefix=true"]
                      },
                      "policyEnforcement": {
                        "type": "boolean",
                        "default": false,
                        "title": "Enable policy enforcement for this route",
                        "examples": [false]
                      },
                      "delegatedPolicyNegotiation": {
                        "type": "boolean",
                        "default": false,
                        "title": "Enable delegated policy negotiation (i.e. the Data App is responsible for the contract negotiation process)",
                        "examples": [false]
                      }
                    },
                    "examples": [
                      {
                        "endpoint": "router",
                        "dataApp": "http://{{ template \"tsg-connector.fullname\" . }}-data-app-http:8080/router",
                        "parameters": "\u0026amp;matchOnUriPrefix=true",
                        "policyEnforcement": false,
                        "delegatedPolicyNegotiation": false
                      }
                    ]
                  },
                  "examples": [
                    [
                      {
                        "endpoint": "router",
                        "dataApp": "http://{{ template \"tsg-connector.fullname\" . }}-data-app-http:8080/router",
                        "parameters": "\u0026amp;matchOnUriPrefix=true",
                        "policyEnforcement": false,
                        "delegatedPolicyNegotiation": false
                      }
                    ]
                  ]
                },
                "idscp": {
                  "type": "array",
                  "default": [],
                  "title": "IDSCP ingress route configurations",
                  "items": {
                    "type": "object",
                    "default": {},
                    "title": "IDSCP Ingress",
                    "required": [
                      "port",
                      "dataApp",
                      "tlsClientHostnameVerification"
                    ],
                    "properties": {
                      "port": {
                        "type": "integer",
                        "default": 0,
                        "title": "Exposed public port for IDSCP",
                        "examples": [9292]
                      },
                      "dataApp": {
                        "type": "string",
                        "default": "",
                        "title": "Data App endpoint the requests are routed to",
                        "examples": [
                          "http://{{ template \"tsg-connector.fullname\" . }}-data-app-http:8080/router"
                        ]
                      },
                      "tlsClientHostnameVerification": {
                        "type": "boolean",
                        "default": false,
                        "title": "TLS Client hostname verification",
                        "examples": [true]
                      }
                    },
                    "examples": [
                      {
                        "port": 9292,
                        "dataApp": "http://{{ template \"tsg-connector.fullname\" . }}-data-app-http:8080/router",
                        "tlsClientHostnameVerification": true
                      }
                    ]
                  },
                  "examples": [
                    [
                      {
                        "port": 9292,
                        "dataApp": "http://{{ template \"tsg-connector.fullname\" . }}-data-app-http:8080/router",
                        "tlsClientHostnameVerification": true
                      }
                    ]
                  ]
                }
              },
              "examples": [
                {
                  "http": [
                    {
                      "endpoint": "router",
                      "dataApp": "http://{{ template \"tsg-connector.fullname\" . }}-data-app-http:8080/router",
                      "parameters": "\u0026amp;matchOnUriPrefix=true",
                      "policyEnforcement": false,
                      "delegatedPolicyNegotiation": false
                    }
                  ],
                  "idscp": [
                    {
                      "port": 9292,
                      "dataApp": "http://{{ template \"tsg-connector.fullname\" . }}-data-app-http:8080/router",
                      "tlsClientHostnameVerification": true
                    }
                  ]
                }
              ]
            },
            "egress": {
              "type": "object",
              "default": {},
              "title": "Egress route configuration",
              "properties": {
                "http": {
                  "type": "array",
                  "default": [],
                  "title": "HTTP egress route configurations",
                  "items": {
                    "type": "object",
                    "default": {},
                    "title": "HTTP Egress",
                    "required": ["endpoint"],
                    "properties": {
                      "endpoint": {
                        "type": "string",
                        "default": "",
                        "title": "Internal endpoint exposed by the core container for receiving messages intended for egress",
                        "examples": ["https_out"]
                      }
                    },
                    "examples": [
                      {
                        "endpoint": "https_out"
                      }
                    ]
                  },
                  "examples": [
                    [
                      {
                        "endpoint": "https_out"
                      }
                    ]
                  ]
                },
                "idscp": {
                  "type": "array",
                  "default": [],
                  "title": "IDSCP egress route configurations",
                  "items": {
                    "type": "object",
                    "default": {},
                    "title": "IDSCP Egress",
                    "required": ["endpoint"],
                    "properties": {
                      "endpoint": {
                        "type": "string",
                        "default": "",
                        "title": "Internal endpoint exposed by the core container for receiving messages intended for egress",
                        "examples": ["idscp_out"]
                      }
                    },
                    "examples": [
                      {
                        "endpoint": "idscp_out"
                      }
                    ]
                  },
                  "examples": [
                    [
                      {
                        "endpoint": "idscp_out"
                      }
                    ]
                  ]
                }
              },
              "examples": [
                {
                  "http": [
                    {
                      "endpoint": "https_out"
                    }
                  ],
                  "idscp": [
                    {
                      "endpoint": "idscp_out"
                    }
                  ]
                }
              ]
            }
          },
          "examples": [
            {
              "ingress": {
                "http": [
                  {
                    "endpoint": "router",
                    "dataApp": "http://{{ template \"tsg-connector.fullname\" . }}-data-app-http:8080/router",
                    "parameters": "\u0026amp;matchOnUriPrefix=true",
                    "policyEnforcement": false,
                    "delegatedPolicyNegotiation": false
                  }
                ],
                "idscp": [
                  {
                    "port": 9292,
                    "dataApp": "http://{{ template \"tsg-connector.fullname\" . }}-data-app-http:8080/router",
                    "tlsClientHostnameVerification": true
                  }
                ]
              },
              "egress": {
                "http": [
                  {
                    "endpoint": "https_out"
                  }
                ],
                "idscp": [
                  {
                    "endpoint": "idscp_out"
                  }
                ]
              }
            }
          ]
        },
        "workflow": {
          "type": "object",
          "default": null,
          "title": "Workflow Engine configuration",
          "properties": {
            "incrementalIds": {
              "type": "boolean",
              "default": true,
              "title": "Use incremental IDs for workflows (for testing purposes only)",
              "examples": [true]
            },
            "type": {
              "type": "string",
              "default": "IDS",
              "title": "Type of Workflows",
              "examples": ["IDS"]
            },
            "internalHostname": {
              "type": "string",
              "default": "{{ template \"tsg-connector.fullname\" . }}",
              "title": "Internal hostname of the core container (must be reachable from apps started by the core container)",
              "examples": ["{{ template \"tsg-connector.fullname\" . }}"]
            },
            "useOrchestration": {
              "type": "boolean",
              "default": true,
              "title": "Use the embedded Orchestration Manager for starting apps",
              "examples": [true]
            }
          },
          "examples": [
            {
              "incrementalIds": true,
              "type": "IDS",
              "internalHostname": "{{ template \"tsg-connector.fullname\" . }}",
              "useOrchestration": true
            }
          ]
        },
        "orchestrationManagerConfig": {
          "type": "object",
          "default": {},
          "title": "Orchestration Manager configuration",
          "properties": {
            "enableKubernetes": {
              "type": "boolean",
              "default": true,
              "title": "Enable Kubernetes orchestration (auto-configuring when deployed in a Kubernetes environment)",
              "examples": [true]
            },
            "pullSecretName": {
              "type": "string",
              "default": null,
              "title": "Default Pull Secret to use for apps",
              "examples": ["ids-pull-secret"]
            }
          },
          "examples": [
            {
              "enableKubernetes": true,
              "pullSecretName": "ids-pull-secret"
            }
          ]
        },
        "security": {
          "type": "object",
          "default": {},
          "title": "Core Container API Security for data apps (API Keys) and admin UI (user credentials)",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true,
              "title": "Enable the security feature and block all unauthorized requests to the API",
              "examples": [true]
            },
            "apiKeys": {
              "type": "array",
              "default": [],
              "title": "API Key Configuration",
              "items": {
                "type": "object",
                "default": {},
                "title": "API Key",
                "required": ["id", "key", "roles"],
                "properties": {
                  "id": {
                    "type": "string",
                    "default": "",
                    "title": "API Key identifier",
                    "examples": ["default"]
                  },
                  "key": {
                    "type": "string",
                    "pattern": "^APIKEY-.*",
                    "default": "",
                    "title": "API Key (must start with \"APIKEY-\")",
                    "examples": ["APIKEY-BQf3ta9Gkkr36MtQjRsQ3noX"]
                  },
                  "roles": {
                    "type": "array",
                    "default": [],
                    "title": "API Key role assignments",
                    "items": {
                      "type": "string",
                      "title": "Role",
                      "enum": [
                        "ADMIN",
                        "DATA_APP",
                        "READER",
                        "INTERNAL",
                        "ARTIFACT_PROVIDER_MANAGER",
                        "ARTIFACT_PROVIDER_READER",
                        "ARTIFACT_CONSUMER",
                        "ORCHESTRATION_MANAGER",
                        "ORCHESTRATION_READER",
                        "PEF_MANAGER",
                        "PEF_READER",
                        "RESOURCE_MANAGER",
                        "RESOURCE_READER",
                        "ROUTE_MANAGER",
                        "ROUTE_READER",
                        "DESCRIPTION_READER",
                        "DESCRIPTION_MANAGER",
                        "WORKFLOW_MANAGER",
                        "WORKFLOW_READER"
                      ],
                      "examples": [
                        "DATA_APP",
                        "PEF_MANAGER",
                        "WORKFLOW_MANAGER"
                      ]
                    },
                    "examples": [
                      ["DATA_APP", "PEF_MANAGER", "WORKFLOW_MANAGER"]
                    ]
                  }
                },
                "examples": [
                  {
                    "id": "default",
                    "key": "APIKEY-BQf3ta9Gkkr36MtQjRsQ3noX",
                    "roles": ["DATA_APP", "PEF_MANAGER", "WORKFLOW_MANAGER"]
                  }
                ]
              },
              "examples": [
                [
                  {
                    "id": "default",
                    "key": "APIKEY-BQf3ta9Gkkr36MtQjRsQ3noX",
                    "roles": ["DATA_APP", "PEF_MANAGER", "WORKFLOW_MANAGER"]
                  }
                ]
              ]
            },
            "users": {
              "type": "array",
              "default": [],
              "title": "API User Configuration",
              "items": {
                "type": "object",
                "default": {},
                "title": "API User",
                "required": ["id", "password", "roles"],
                "properties": {
                  "id": {
                    "type": "string",
                    "default": "",
                    "title": "User identifier (also used as username for the user)",
                    "examples": ["admin"]
                  },
                  "password": {
                    "type": "string",
                    "default": "",
                    "pattern": "[$]2[abxy]?[$](?:0[4-9]|[12]\\d|3[01])[$][./\\da-zA-Z]{53}",
                    "title": "BCrypt encoded password",
                    "examples": [
                      "$2a$12$Xx4uZNtOBu91N0.D1GBi6ePelIJbNT8UzDppN.fU0P4lomlG/BcCm"
                    ]
                  },
                  "roles": {
                    "type": "array",
                    "default": [],
                    "title": "User role assignments",
                    "items": {
                      "type": "string",
                      "default": "",
                      "title": "Role",
                      "enum": [
                        "ADMIN",
                        "DATA_APP",
                        "READER",
                        "INTERNAL",
                        "ARTIFACT_PROVIDER_MANAGER",
                        "ARTIFACT_PROVIDER_READER",
                        "ARTIFACT_CONSUMER",
                        "ORCHESTRATION_MANAGER",
                        "ORCHESTRATION_READER",
                        "PEF_MANAGER",
                        "PEF_READER",
                        "RESOURCE_MANAGER",
                        "RESOURCE_READER",
                        "ROUTE_MANAGER",
                        "ROUTE_READER",
                        "DESCRIPTION_READER",
                        "DESCRIPTION_MANAGER",
                        "WORKFLOW_MANAGER",
                        "WORKFLOW_READER"
                      ],
                      "examples": ["ADMIN"]
                    },
                    "examples": [["ADMIN"]]
                  }
                },
                "examples": [
                  {
                    "id": "admin",
                    "password": "$2a$12$Xx4uZNtOBu91N0.D1GBi6ePelIJbNT8UzDppN.fU0P4lomlG/BcCm",
                    "roles": ["ADMIN"]
                  }
                ]
              },
              "examples": [
                [
                  {
                    "id": "admin",
                    "password": "$2a$12$Xx4uZNtOBu91N0.D1GBi6ePelIJbNT8UzDppN.fU0P4lomlG/BcCm",
                    "roles": ["ADMIN"]
                  }
                ]
              ]
            }
          },
          "examples": [
            {
              "enabled": true,
              "apiKeys": [
                {
                  "id": "default",
                  "key": "APIKEY-BQf3ta9Gkkr36MtQjRsQ3noX",
                  "roles": ["DATA_APP", "PEF_MANAGER", "WORKFLOW_MANAGER"]
                }
              ],
              "users": [
                {
                  "id": "admin",
                  "password": "$2a$12$Xx4uZNtOBu91N0.D1GBi6ePelIJbNT8UzDppN.fU0P4lomlG/BcCm",
                  "roles": ["ADMIN"]
                }
              ]
            }
          ]
        }
      },
      "examples": [
        {
          "info": {
            "idsid": "IDS_COMPONENT_ID",
            "curator": "IDS_PARTICIPANT_ID",
            "maintainer": "IDS_PARTICIPANT_ID",
            "titles": ["CONNECTOR TITLE@en"],
            "descriptions": ["CONNECTOR DESCRIPTION@en"],
            "accessUrl": ["https://{{ .Values.host }}/router"]
          },
          "daps": {
            "url": "https://daps.test.ids.smart-connected.nl"
          },
          "keystore": {
            "type": "PEM",
            "pem": {
              "cert": "file:/secrets/idsidentity/ids.crt",
              "key": "file:/secrets/idsidentity/ids.key"
            }
          },
          "truststore": {
            "type": "PEM",
            "pem": {
              "chain": "file:/secrets/idsidentity/ca.crt"
            }
          },
          "broker": {
            "id": "urn:ids:connectors:Broker",
            "address": "https://broker.test.ids.smart-connected.nl",
            "autoRegister": true
          },
          "routes": {
            "ingress": {
              "http": [
                {
                  "endpoint": "router",
                  "dataApp": "http://{{ template \"tsg-connector.fullname\" . }}-data-app-http:8080/router",
                  "parameters": "\u0026amp;matchOnUriPrefix=true",
                  "policyEnforcement": false,
                  "delegatedPolicyNegotiation": false
                }
              ],
              "idscp": [
                {
                  "port": 9292,
                  "dataApp": "http://{{ template \"tsg-connector.fullname\" . }}-data-app-http:8080/router",
                  "tlsClientHostnameVerification": true
                }
              ]
            },
            "egress": {
              "http": [
                {
                  "endpoint": "https_out"
                }
              ],
              "idscp": [
                {
                  "endpoint": "idscp_out"
                }
              ]
            }
          },
          "workflow": {
            "incrementalIds": true,
            "type": "IDS",
            "internalHostname": "{{ template \"tsg-connector.fullname\" . }}",
            "useOrchestration": true
          },
          "orchestrationManagerConfig": {
            "enableKubernetes": true,
            "pullSecretName": "ids-pull-secret"
          },
          "security": {
            "enabled": true,
            "apiKeys": [
              {
                "id": "default",
                "key": "APIKEY-BQf3ta9Gkkr36MtQjRsQ3noX",
                "roles": ["DATA_APP", "PEF_MANAGER", "WORKFLOW_MANAGER"]
              }
            ],
            "users": [
              {
                "id": "admin",
                "password": "$2a$12$Xx4uZNtOBu91N0.D1GBi6ePelIJbNT8UzDppN.fU0P4lomlG/BcCm",
                "roles": ["ADMIN"]
              }
            ]
          }
        }
      ]
    }
  }
}
